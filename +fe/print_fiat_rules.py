"""This script prints rules produced by FIAT. Lower order are hard-coded
and higher orders come from the collapsed quadrature rules defined in
Karniadakis & Sherwin by mapping products of Gauss-Jacobi rules
from the cube to the tetrahedron.

Usage:

    python3 print_fiat_rules.pu [maxorder] > make_quadrature_rule.m
"""

import FIAT
import numpy

import os


file_prologue = """\
function [x, w] = make_quadrature_rule(dim, order)
    % Quadrature rules for reference simplex.
    %
    % SYNTAX
    %
    %   [x, w] = make_quadrature(dim, order)
    %
    % INPUT/OUTPUT PARAMETERS
    %
    %   dim   ... Dimension of the reference cell.
    %   order ... Order of the quadrature that should be returned.
    %   x     ... An n x dim matrix of quadrature points.
    %   w     ... An n x 1 vector of corresponding weights.
    %
    % REMARKS
    %
    %   Reference simplex of dimension dim is given by
    %   vertex coordinates
    %
    %     [eye(dim), zeros(dim, 1)]
    %
    %   This file is generated by script print_quadrature_rules.py.

    switch dim
        case 1
            [x, w] = make_quadrature_rule_interval(order);
        case 2
            [x, w] = make_quadrature_rule_triangle(order);
        case 3
            [x, w] = make_quadrature_rule_tetrahedron(order);
    end
end
"""


func_prologue = """\
function [x, w] = make_quadrature_rule_{}(order)
    switch order
"""


func_epilogue = """\
        otherwise
            error('Order %d unsupported.', order);
    end
    x = data(:, 1:{});
    w = data(:, {});
end
"""


def generate_case(cell, order):
    # Get the quadrature rule
    rule = FIAT.create_quadrature(cell, order)
    x, w = numpy.array(rule.pts), numpy.array(rule.wts)
    data = numpy.concatenate((x, w.T.reshape(w.size, 1)), axis=1)

    # Format as matlab code
    code = []
    code.append("        case {}".format(order))
    code.append("            data = [")
    for row in data:
        l = ["{: .15f}".format(c) for c in row]
        l = ", ".join(l) + ";"
        code.append("                {}".format(l))
    code.append("            ];")
    code = os.linesep.join(code)

    return code


def generate_func_body(celltype, orders):
    # Get data
    cell = FIAT.reference_element.ufc_cell(celltype)
    dim = cell.get_dimension()

    # Generate body function, order-by-order
    code = []
    code.append(func_prologue.format(celltype))
    for order in orders:
        code.append(generate_case(cell, order))
    code.append(func_epilogue.format(dim, dim+1))
    code = os.linesep.join(code)

    return code


def generate_file(orders):
    code = []
    code.append(file_prologue)
    for celltype in ["interval", "triangle", "tetrahedron"]:
        code.append(generate_func_body(celltype, orders))
    code = os.linesep.join(code)

    return code


if __name__ == '__main__':
    import sys
    maxorder = int(sys.argv[1]) if len(sys.argv) >= 2 else 8
    code = generate_file(range(maxorder + 1))
    print(code)
